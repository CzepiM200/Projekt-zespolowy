{"version":3,"sources":["AxiosApi.js","components/NavBar.js","components/Chart.js","components/StatisticsMenu.js","components/UnstandardizedDate.js","components/Statistics.js","components/Diagnostic.js","components/Porter.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["baseURL","axiosInstance","axios","create","timeout","headers","localStorage","getItem","interceptors","response","use","error","originalRequest","config","status","url","window","location","href","Promise","reject","data","code","statusText","refreshToken","tokenParts","JSON","parse","atob","split","now","Math","ceil","Date","console","log","exp","post","refresh","then","setItem","access","defaults","catch","err","NavBar","handleLogout","bind","this","props","onLogOut","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","onClick","Component","Chart","state","selectedChart","labels","datasets","label","fill","backgroundColor","borderColor","borderDashOffset","pointBackgroundColor","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","numbers","options","scales","yAxes","display","ticks","beginAtZero","suggestedMax","responsive","redraw","StatisticsMenu","handleChange","event","setState","target","value","typeOfChart","handleSubmit","selectChart","activeChart","onMouseEnter","UnstandardizedDate","handleDateChange","setDateChange","onDateChange","firstDate","secondDate","htmlFor","Statistics","onChartSelect","data1","data2","getFullYear","getMonth","getDay","toISOString","URL","get","fistDate","earlyDate","lateDate","chartType","Diagnostic","connectionCharacter","camera1Character","routerConnectionCharacter","isWorking","checkSystem","info","self","setInfo","Porter","handleChangeFrom","from","handleChangeTo","number","onChange","class","onSubmit","Login","email","password","handleSubmitWThen","name","preventDefault","result","jwt","jwtData","decodedJwtJsonData","decodedJwtData","user_email","role","onLogIn","App","logIn","forceUpdate","render","match","Boolean","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d714f310.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst baseURL = 'https://system-liczenia-frekwencji.herokuapp.com/auth/'\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: baseURL,\r\n    timeout: 5000,\r\n    headers: {\r\n        'Authorization': localStorage.getItem('access_token') ? \"JWT \" + localStorage.getItem('access_token') : null,\r\n        'Content-Type': 'application/json',\r\n        'accept': 'application/json'\r\n    }\r\n});\r\n\r\n\r\naxiosInstance.interceptors.response.use(\r\n    response => response,\r\n    error => {\r\n        const originalRequest = error.config;\r\n\r\n        // Prevent infinite loops early\r\n        if (error.response.status === 401 && originalRequest.url === baseURL+'token/refresh/') {\r\n            window.location.href = '/login/';\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        if (error.response.data.code === \"token_not_valid\" &&\r\n            error.response.status === 401 && \r\n            error.response.statusText === \"Unauthorized\") \r\n            {\r\n                const refreshToken = localStorage.getItem('refresh_token');\r\n\r\n                if (refreshToken){\r\n                    const tokenParts = JSON.parse(atob(refreshToken.split('.')[1]));\r\n\r\n                    // exp date in token is expressed in seconds, while now() returns milliseconds:\r\n                    const now = Math.ceil(Date.now() / 1000);\r\n                    console.log(tokenParts.exp);\r\n\r\n                    if (tokenParts.exp > now) {\r\n                        return axiosInstance\r\n                        .post('/token/refresh/', {refresh: refreshToken})\r\n                        .then((response) => {\r\n            \r\n                            localStorage.setItem('access_token', response.data.access);\r\n                            localStorage.setItem('refresh_token', response.data.refresh);\r\n            \r\n                            axiosInstance.defaults.headers['Authorization'] = \"JWT \" + response.data.access;\r\n                            originalRequest.headers['Authorization'] = \"JWT \" + response.data.access;\r\n            \r\n                            return axiosInstance(originalRequest);\r\n                        })\r\n                        .catch(err => {\r\n                            console.log(err)\r\n                        });\r\n                    }else{\r\n                        console.log(\"Refresh token is expired\", tokenParts.exp, now);\r\n                        window.location.href = '/login/';\r\n                    }\r\n                }else{\r\n                    console.log(\"Refresh token not available.\")\r\n                    window.location.href = '/login/';\r\n                }\r\n        }\r\n      \r\n     \r\n      // specific error handling done elsewhere\r\n      return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default axiosInstance","import React, { Component } from \"react\";\r\nimport {Link} from 'react-router-dom';\r\nimport axiosInstance from \"../AxiosApi\";\r\n\r\nclass NavBar extends Component {\r\n    constructor() {\r\n        super();\r\n        this.handleLogout = this.handleLogout.bind(this);\r\n    }\r\n\r\n    async handleLogout() {\r\n        this.props.onLogOut();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n                <a className=\"navbar-brand\" href=\"/\">System liczenia frekwencji</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n                    <ul className=\"navbar-nav\">\r\n                        <li className=\"nav-item\"><Link to=\"./login\">Logowanie</Link></li>\r\n                        <button onClick={this.handleLogout}>Logout</button>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;","import React, { Component } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nexport class Chart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            type: this.props.selectedChart,\r\n            data: {\r\n                labels: props.labels,\r\n                datasets: [\r\n                    {\r\n                        label: 'Liczba osób',\r\n                        fill: true,\r\n                        backgroundColor: 'rgba(220,20,60,0.4)',\r\n                        borderColor: 'rgba(220,20,60,1)',\r\n                        borderDashOffset: 0.0,\r\n                        pointBackgroundColor: '#fff',\r\n                        pointHoverRadius: 5,\r\n                        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n                        pointHoverBorderColor: '#000',\r\n                        pointHoverBorderWidth: 2,\r\n                        pointRadius: 4,\r\n                        pointHitRadius: 5,\r\n                        data: props.numbers\r\n                    }\r\n                ],\r\n            },\r\n            options: {\r\n                scales: {\r\n                    yAxes: [{\r\n                        display: true,\r\n                        ticks: {\r\n                            beginAtZero: true,\r\n                            suggestedMax: 100,\r\n                        }\r\n                    }]\r\n                },\r\n                responsive: true\r\n            }\r\n        };\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Line data={this.state.data} options={this.state.options} redraw />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Chart;","import React, { Component } from \"react\";\r\n\r\nclass StatisticsMenu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedChart: null,\r\n            typeOfChart: 'today',\r\n            activeChart: 'dzisiaj'\r\n        }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            selectedChart: event.target.value,\r\n            typeOfChart: event.target.id\r\n        });\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        this.props.selectChart(this.state.typeOfChart)\r\n        this.setState({\r\n            activeChart: this.state.selectedChart\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"list-group\">\r\n                <div className=\"card text-white bg-primary mb-3\">\r\n                    <div className=\"card-header\">Statystyki z {this.state.activeChart}</div>\r\n                </div>\r\n\r\n                <button id=\"today\" value='dzisiaj' onClick={this.handleSubmit} onMouseEnter={this.handleChange} className=\"list-group-item list-group-item-action\">Statystyki z dzisiaj</button>\r\n                <button id=\"yesterday\" value='wczoraj' onClick={this.handleSubmit} onMouseEnter={this.handleChange} className=\"list-group-item list-group-item-action\">Statystyki z wczoraj</button>\r\n                <button id=\"week\" value='tygodnia' onClick={this.handleSubmit} onMouseEnter={this.handleChange} className=\"list-group-item list-group-item-action\">Statystyki z tygodnia</button>\r\n                <button id=\"month\" value='miesiąca' onClick={this.handleSubmit} onMouseEnter={this.handleChange} className=\"list-group-item list-group-item-action\">Statystyki z miesiąca</button>\r\n                <button id=\"year\" value='roku' onClick={this.handleSubmit} onMouseEnter={this.handleChange} className=\"list-group-item list-group-item-action\">Statystyki z roku</button>\r\n                <button id=\"all\" value='całego okresu' onClick={this.handleSubmit} onMouseEnter={this.handleChange} className=\"list-group-item list-group-item-action\">Statystyki z całego okresu</button>\r\n                <button id=\"unstandardized\" value='okersu niestandardowego' onClick={this.handleSubmit} onMouseEnter={this.handleChange} className=\"list-group-item list-group-item-action\">Statystyki z okresu niestandardowego</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StatisticsMenu;","import React, { Component } from 'react';\r\n\r\n\r\nexport class UnstandardizedDate extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            firstDate: null,\r\n            secondDate: null\r\n        };\r\n    }\r\n\r\n    handleDateChange = (selectedChart) => {\r\n        this.setState({\r\n            selectedChart\r\n        });\r\n    }\r\n\r\n    setDateChange = () => {\r\n        this.props.onDateChange('date1', 'date2');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-6 input-group\">\r\n                    <div className=\"input-group-prepend\">\r\n                        <label className=\"input-group-text\" htmlFor=\"inputGroupSelect01\">Do:</label>\r\n                    </div>\r\n                    <input type=\"date\"></input>\r\n                </div>\r\n\r\n                <div className=\"col-6 input-group\">\r\n                    <div className=\"input-group-prepend\">\r\n                        <label className=\"input-group-text\" htmlFor=\"inputGroupSelect02\">Do:</label>\r\n                    </div>\r\n                    <input type=\"date\"></input>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UnstandardizedDate;","import axios from 'axios';\r\nimport React, { Component } from 'react';\r\nimport Chart from './Chart'\r\nimport StatisticsMenu from './StatisticsMenu';\r\nimport UnstandardizedDate from './UnstandardizedDate';\r\n\r\n\r\nexport class Statistics extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedChart: 'today',\r\n            earlyDate: 0,\r\n            lateDate: 0\r\n        };\r\n\r\n        this.onChartSelect = this.onChartSelect.bind(this);\r\n    }\r\n\r\n    onChartSelect = (selectedChart) => {\r\n        this.setState({\r\n            selectedChart\r\n        });     \r\n\r\n        const self = this;\r\n        let now = new Date();\r\n        let data1 = new Date();\r\n        let data2 = new Date();\r\n\r\n        if (this.state.selectedChart === 'today') {\r\n            \r\n            data1 =  new Date(now.getFullYear(), now.getMonth(), now.getDay());\r\n            data2 = new Date(now.getFullYear(), now.getMonth(), now.getDay() + 1);\r\n        }\r\n\r\n        console.log(data1.toISOString())\r\n        console.log(data2.toISOString())\r\n\r\n        const URL = 'http://system-liczenia-frekwencji.herokuapp.com/api/entrances/[' + data1.toISOString() + '][' + data2.toISOString() + ']';\r\n        \r\n        axios.get(URL, { headers: {\"Authorization\" : 'JWT ' + localStorage.getItem('access_token')} })\r\n            .then(function (response) {\r\n                console.log(response);\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    onDateChange = (fistDate, secondDate) => {\r\n        // this.setState({\r\n        //     earlyDate: fistDate,\r\n        //     lateDate: secondDate\r\n        // });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row justify-content-around\">\r\n                    <div className=\"col-3\">\r\n                        <StatisticsMenu chartType={this.state.chartType} selectChart={this.onChartSelect}/>\r\n                    </div>\r\n                    <div className=\"col-8\">\r\n                        <div className=\"row\">\r\n                            <UnstandardizedDate />\r\n                        </div>\r\n\r\n                        <br></br>\r\n                        <Chart labels={this.props.labels} numbers={this.props.numbers} selectedChart={this.props.selectedChart} onDateChange={this.onDateChange} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Statistics;","import React, { Component } from \"react\";\r\nimport axios from 'axios';\r\n\r\nclass Diagnostic extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            connectionCharacter: \" \",\r\n            camera1Character: \" \",\r\n            routerConnectionCharacter: \" \",\r\n            isWorking: false\r\n        };\r\n\r\n        this.checkSystem = this.checkSystem.bind(this);\r\n    }\r\n\r\n    setInfo(info) {\r\n        if (info == 's') {\r\n            return (<div><span className=\"badge badge-success badge-pill\">Działa poprawnie</span></div>);\r\n        } else if (info == 'w'){\r\n            return (<span className=\"badge badge-warning badge-pill\">W trakcie sprawdzania</span>);\r\n        } else if (info == 'd'){\r\n            return (<span className=\"badge badge-danger badge-pill\">Wystąpił błąd</span>);\r\n        } else {\r\n            return (<span className=\"badge badge-warning badge-pill\">..</span>);\r\n        }\r\n    }\r\n\r\n    checkSystem() {\r\n        this.setState({\r\n            connectionCharacter: 'w',\r\n            camera1Character: 'w',\r\n            routerConnectionCharacter: 'w'\r\n        });\r\n        \r\n        var self = this;\r\n        axios.get('http://system-liczenia-frekwencji.herokuapp.com/api/service/connectivity', { headers: {\"Authorization\" : 'JWT ' + localStorage.getItem('access_token')} })\r\n            .then(function (response) {\r\n                if (response.data.isWorking) {\r\n                    self.setState({\r\n                        connectionCharacter: 's',\r\n                        camera1Character: 's',\r\n                        routerConnectionCharacter: 's'\r\n                    });\r\n                } else {\r\n                    self.setState({\r\n                        connectionCharacter: 's',\r\n                        camera1Character: 'd',\r\n                        routerConnectionCharacter: 's'\r\n                    });\r\n                    \r\n                }\r\n                console.log(this.state.routerConnectionCharacter);\r\n            })\r\n            .catch(function (error) {\r\n            });\r\n        \r\n        if (this.state.connectionCharacter != 's') {\r\n            self.setState({\r\n                connectionCharacter: 'd',\r\n                camera1Character: 'd',\r\n                routerConnectionCharacter: 'd'\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"col-12\">\r\n                    <ul className=\"list-group\">\r\n                        <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                            <h4>Diagnostyka systemu</h4>\r\n                            <button onClick={this.checkSystem} type=\"button\" className=\"btn btn-info\">Rozpocznij test</button>\r\n                        </li>\r\n                        <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                            Połączenie z serwerem\r\n                            {this.setInfo(this.state.connectionCharacter)}\r\n                        </li>\r\n                        <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                            Połączenie z routerem\r\n                            {this.setInfo(this.state.routerConnectionCharacter)}\r\n                        </li>\r\n                        <li className=\"list-group-item d-flex justify-content-between align-items-center\">\r\n                            Połączenie serwera z kamerą [nazwa kamery 1]\r\n                            {this.setInfo(this.state.camera1Character)}\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Diagnostic;","import React, { Component } from \"react\";\r\n\r\nclass Porter extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            from: '00:00',\r\n            to: '00:00',\r\n            number: '0'\r\n        };\r\n    }\r\n\r\n    handleChangeFrom = (event) => {\r\n        this.setState({\r\n            from: event.target.value\r\n        })\r\n    }\r\n\r\n    handleChangeTo = (event) => {\r\n        this.setState({\r\n            from: event.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = () => {\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container-md\">\r\n                <div className=\"row justify-content-around\">\r\n                    <div className=\"col-12 input-group justify-content-center\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <label className=\"input-group-text\" htmlFor=\"inputGroupSelect02\">Od:</label>\r\n                        </div>\r\n                        <input type=\"time\" onChange={this.handleChangeFrom}></input>\r\n                    </div>\r\n                    <div className=\"col-12 input-group justify-content-center\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <label className=\"input-group-text\" htmlFor=\"inputGroupSelect02\">Do:</label>\r\n                        </div>\r\n                        <input type=\"time\" onChange={this.handleChangeTo}></input>\r\n                    </div>\r\n                </div>\r\n                <br></br>\r\n                <div className=\"row justify-content-around\">\r\n                    <button type=\"button\" class=\"btn btn-primary\" onSubmit={this.handleSubmit}>Sprawdź</button>\r\n                </div>\r\n                <hr></hr>\r\n                <div className=\"row justify-content-around\">\r\n                    <div className=\"alert alert-dismissible alert-info\">\r\n                        <strong>Liczba osób wykrytych przez kamerę:</strong><br></br>\r\n                        <h3>{this.state.number}</h3>\r\n                    </div>\r\n                </div>\r\n                <hr></hr>\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default Porter;","import React, { Component } from \"react\";\r\nimport axiosInstance from \"../AxiosApi\";\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {email: \"\", password: \"\"};\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleSubmitWThen = this.handleSubmitWThen.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({[event.target.name]: event.target.value});\r\n    }\r\n\r\n    handleSubmitWThen(event){\r\n        event.preventDefault();\r\n        axiosInstance.post('/token/obtain/', {\r\n                email: this.state.email,\r\n                password: this.state.password\r\n            }).then(\r\n                result => {\r\n                    axiosInstance.defaults.headers['Authorization'] = \"JWT \" + result.data.access;\r\n                    localStorage.setItem('access_token', result.data.access);\r\n                    localStorage.setItem('refresh_token', result.data.refresh);\r\n                }\r\n            ).catch (error => {\r\n                throw error;\r\n            })\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n        try {\r\n            const response = await axiosInstance.post('/token/obtain/', {\r\n                email: this.state.email,\r\n                password: this.state.password\r\n            });\r\n            axiosInstance.defaults.headers['Authorization'] = \"JWT \" + response.data.access;\r\n            localStorage.setItem('access_token', response.data.access);\r\n            localStorage.setItem('refresh_token', response.data.refresh);\r\n\r\n            let jwt = localStorage.getItem('access_token');\r\n            let jwtData = jwt.split('.')[1];\r\n            let decodedJwtJsonData = window.atob(jwtData);\r\n            let decodedJwtData = JSON.parse(decodedJwtJsonData);\r\n\r\n            let email = decodedJwtData.user_email;\r\n            let role = email.split('@')[0];\r\n            localStorage.setItem('role', role);\r\n            this.props.onLogIn(true, role);\r\n\r\n            return response;\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>Strona w trakcie wystawiania, w razie problemów prosimy spróbować później... (3.3)</h3>\r\n                Login\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Email:\r\n                        <input name=\"email\" type=\"text\" value={this.state.email} onChange={this.handleChange}/>\r\n                    </label>\r\n                    <label>\r\n                        Password:\r\n                        <input name=\"password\" type=\"password\" value={this.state.password} onChange={this.handleChange}/>\r\n                    </label>\r\n                    <input type=\"submit\" value=\"Submit\"/>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Login;","import React, { Component } from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n} from 'react-router-dom';\r\nimport './App.css';\r\nimport NavBar from './components/NavBar';\r\nimport Statistics from './components/Statistics';\r\nimport Diagnostic from './components/Diagnostic';\r\nimport Porter from './components/Porter';\r\nimport Login from './components/Login';\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      logIn: false,\r\n      role: 'non'\r\n    };\r\n  }\r\n\r\n  onLogIn = (status, type) => {\r\n    if (status) {\r\n      this.setState({\r\n        logIn: status,\r\n        role: type\r\n      });\r\n      this.forceUpdate();\r\n    }\r\n    else {\r\n      this.setState({\r\n        logIn: status,\r\n        role: type\r\n      });\r\n    }\r\n}\r\n\r\nonLogOut = () => {\r\n  this.setState({\r\n    logIn: false,\r\n    role: \"non\"\r\n  });\r\n}\r\n\r\n  render(){\r\n    return (\r\n      <div>\r\n        <Router>\r\n          <NavBar onLogOut={this.onLogOut}/>\r\n          <div className=\"row justify-content-around\">\r\n            <Switch>\r\n              <Route render={\r\n                ({match}) => {\r\n                  if(this.state.logIn) {\r\n                    if (this.state.role == 'analityk') {\r\n                      return (<Statistics\r\n                        labels={[\"Dzień 1\", \"Dzień 2\", \"Dzień 3\", \"Dzień 4\", \"Dzień 5\", \"Dzień 6\", \"Dzień 7\"]}\r\n                        numbers={[35, 48, 60, 54, 56, 83, 42]}\r\n                        type={\"D\"} />)\r\n                    }\r\n                    if (this.state.role == 'technik') {\r\n                      return (<Diagnostic/>)\r\n                    }\r\n                    if (this.state.role == 'portier') {\r\n                      return (<Porter/>)\r\n                    }\r\n                  }\r\n                  else {\r\n                    return (<Login onLogIn={this.onLogIn}/>);\r\n                  }\r\n                }\r\n              }/>\r\n            </Switch>\r\n          </div>\r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}